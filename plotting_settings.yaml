robot: "trunk"
save_dir: "plots/"
file_format: "png"

traj_dir: "sim_trajs/pac-man" # figure8" # circle_z=-10" # 

show: {
    'ssmr': False,
    'ssmr_origin': True,
    'ssmr_adiabatic_ct': False,
    'ssmr_adiabatic_nn': False,
    'ssmr_adiabatic_qp': True,
    'ssmr_adiabatic_idw': False,
    'ssmr_adiabatic_modified-idw': True,
    'tpwl': True,
    'koopman': False,
}
display_name: {
    'ssmr': "ASSMR (current model)",
    'ssmr_origin': "Origin (N=1)",
    'ssmr_adiabatic_ct': "CT (2D, N=9)",
    'ssmr_adiabatic_nn': "NN (N=100)",
    'ssmr_adiabatic_qp': "QP-2D (N=100)",
    'ssmr_adiabatic_idw': "IDW-6D (N=100)",
    'ssmr_adiabatic_modified-idw': "Modified-IDW-6D (N=100)",
    'tpwl': "TPWL",
    'koopman': "Koopman",
}
color: {
    'ssmr': "tab:pink",
    'ssmr_origin': "tab:blue",
    'ssmr_adiabatic_ct': "tab:red",
    'ssmr_adiabatic_nn': "tab:brown",
    'ssmr_adiabatic_qp': "tab:purple",
    'ssmr_adiabatic_idw': "tab:red",
    'ssmr_adiabatic_modified-idw': "tab:red",
    'tpwl': 'tab:green',
    'koopman': 'tab:orange',
    'target': 'black'
}
linestyle: {
    'tpwl': '-',
    'koopman': '-',
    'target': '--'
}
linewidth: {
    'tpwl': 2,
    'koopman': 2,
    'target': 1
}

define_targets: {
    figure8: {
        M: 1,
        T: 10,
        N: 1000,
        radius: 30, # 20, # 30, # 
        z_const: 0, # -10, # 0, # 
        # state constraints
        z_lb: null, # [-16, -16],
        z_ub: null  # [16, 5]
    },
    circle_z=-10: {
        M: 1,
        T: 10,
        N: 1000,
        radius: 20,
        z_const: -10,
        # state constraints
        z_lb: null, # [-16, -16],
        z_ub: null  # [16, 5]
    },
    pac-man: {
        M: 1,
        T: 10,
        N: 1000,
        radius: 20,
        z_const: -10,
        t_in_pacman: 1.,
        t_out_pacman: 1.,
        # state constraints
        z_lb: null, # [-16, -16],
        z_ub: null  # [16, 5]
    }
}

plot_mpc_rollouts: False


# TODO
##############################################
# Problem 2, Circle on side
##############################################
# M = 3
# T = 5
# N = 1000
# t_target = np.linspace(0, M*T, M*N)
# th = np.linspace(0, M*2*np.pi, M*N)
#
# r = 15
# phi = 17
# x_target = np.zeros(M*N)
# y_target = r * np.sin(phi * T / (2 * np.pi) * th)
# z_target = r - r * np.cos(phi * T / (2 * np.pi) * th) + 107.0
